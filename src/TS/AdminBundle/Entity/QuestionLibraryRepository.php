<?php

namespace TS\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * QuestionLibraryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionLibraryRepository extends EntityRepository
{
    
     public function getAllQuestions($nombreParPages, $pages) {
        if ($pages < 1) {
            throw new \InvalidArgumentException('L\'argument $pages ne peut être inférieur à 1 (valeur : "' . $pages . '").');
        }
        $query = $this->createQueryBuilder('q')
                ->getQuery();
        $query->setFirstResult(($pages - 1) * $nombreParPages)
                ->setMaxResults($nombreParPages);
        return new Paginator($query);
    }

    public function getSpecificQuestions($nombreParPage, $page, $key, $type) {
        if ($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "' . $page . '").');
        }
        $query = $this->createQueryBuilder('q');
        if (!empty($key)) {
            $query->where('q.introduction LIKE :key')
                    ->orWhere('q.text LIKE :key')
                    ->setParameter('key', '%' . $key . '%');
            if (!empty($type)) {
                $query->andwhere('q.tests= :type')
                        ->setParameter('type', $type);
            }
        } else {
            if (!empty($type)) {
                $query->andwhere('q.tests= :type')
                        ->setParameter('type', $type);
            } else {
                $this->getAllQuestions($nombreParPage, 1);
            }
        }
        $query->setFirstResult(($page - 1) * $nombreParPage)
                ->setMaxResults($nombreParPage);
        return new Paginator($query);
    }

   public function getQuestions($nombreParPages, $pages) {
         if ($pages < 1) {
            throw new \InvalidArgumentException('L\'argument $pages ne peut être inférieur à 1 (valeur : "' . $pages . '").');
        }
       $query = $this->createQueryBuilder('q')
                ->getQuery();
        $query->setFirstResult(($pages - 1) * $nombreParPages)
                ->setMaxResults($nombreParPages);
        return new Paginator($query);
     }

    public function getIdQuestions($ids) {
        $query = $this->createQueryBuilder('q')
                ->where("q.id IN(:ids)")
                ->setParameter('ids', array_values($ids))
                ->getQuery();
        return $query->getResult();
    }
    
     /*public function getStringIdQuestions($ids) {
        $query = $this->createQueryBuilder('q')
                ->where("q.id IN(:ids)")
                ->setParameter('ids', $ids)
                ->getQuery();
        return $query->getResult();
    }*/
public function getByTypeQuestions($type) {
       $query = $this->createQueryBuilder('c')->where('c.type=:type')
               ->setParameter('type', $type)
                     ->getQuery();
        return $query->getResult();
    }
}
